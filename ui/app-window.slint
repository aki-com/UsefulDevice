import { Device } from "device_search.slint";
import { Button, StandardButton ,VerticalBox, ListView, HorizontalBox, Slider, TabWidget, LineEdit} from "std-widgets.slint";

export struct Cmd_Custom {
    label: string,
    command: string,
}

export global App_Data {
    in-out property <[Device]> devices:
        [
            { device_name: "Device1", IP_address: "i"},
            { device_name: "Device2", IP_address: "e"},
            { device_name: "Device3", IP_address: "e"},
            { device_name: "Device4", IP_address: "e"},
            { device_name: "Device5", IP_address: "e"},
            ];
}

/*
<修正点>
・検索バーを追加
・検索ボタンを追加
・検索バーに入力された文字をstring型で格納するプロパティを追加
・ボタンを正方形になるように修正
・構造理解のため、更新ボタンを下に配置したものを作成
・三項演算子をmin関数に変更
・スライドバーを立て中央にしたい
・

*/
/*
<修正点>
・検索バーを追加
・検索ボタンを追加
・検索バーに入力された文字をstring型で格納するプロパティを追加
・ボタンを正方形になるように修正
・構造理解のため、更新ボタンを下に配置したものを作成
・三項演算子をmin関数に変更
・スライドバーを立て中央にしたい
・

*/

export component AppWindow inherits Window {
    callback list_update();
    callback server_connecting(Device);
    callback cmd_send(string);


    in-out property <string> search_IP_address:"";//検索バーの値が格納される

    /*
    バインディングループの解決方法
    1.式をボタンサイズの指定の際に直接入れてしまう→バインディングループは絶対発生しない 
    2. 特になし
    ・root.widthをプロパティにバインドしたものをwidth:で使用したらバインディングループが発生する？
    */
    in-out property <length> Square_size : min(root.width,root.height);
    in-out property <[Device]> devices;
    preferred-width: 100%;
    preferred-height: 100%;
    min-height: 600px;
    min-width: 300px;
    TabWidget {
        Tab {
            VerticalBox {
                alignment: center;
                GridLayout {
                    spacing: 4px;
                    padding: 10px;
                    width: 80%;
                    height: 80%;
                    Button {
                        row: 0; col: 0;
                        text: "T M";
                            
                        clicked => { root.cmd_send("ctrl+Shift+Esc");}
                    }
                    Button {
                        row: 1; col: 0;
                        text: "Ctrl+S";
                            
                        clicked => {root.cmd_send("Ctrl+s");}
                    }
                    Button {
                        row: 2; col: 0;
                        text: "Copy";
                            
                        clicked => {root.cmd_send("Ctrl+c");}
                    }

                    // 2列目
                    Button {
                        row: 0; col: 1;
                        text: "Explorer";
                            
                        clicked => {root.cmd_send("win+e");}
                    }
                    Button {
                        row: 1; col: 1;
                        text: "Ctrl+P";
                            
                        clicked => {root.cmd_send("Ctrl+p");}
                    }
                    Button {
                        row: 2; col: 1;
                        text: "Paste";
                            
                        clicked => {root.cmd_send("Ctrl+v");}
                    }

                    // 3列目
                    Button {
                        row: 0; col: 2;
                        text: "Prt Sc";
                            
                        clicked => {root.cmd_send("Prtsc");}
                    }
                    Button {
                        row: 1; col: 2;
                        text: "win+i";
                            
                        clicked => {root.cmd_send("win+i");}
                    }
                    Button {
                        row: 2; col: 2;
                        text: "Ctrl+A";
                            
                        clicked => {root.cmd_send("Ctrl+a");}
                    }
                    HorizontalBox {
                        alignment: center;
                        row: 3; col: 0; 
                        Button {
                        text: "mute";
                        clicked => {
                            root.cmd_send("mute");
                        }

                        }
                        Slider {
                        height: 20px;
                        }
                    }
                }
            }
        }
        //更新ボタンが横にあるバージョン        //更新ボタンが横にあるバージョン
        Tab {
            HorizontalBox {
                 VerticalBox{
                    HorizontalBox {
                        preferred-height: 50px;
                        preferred-width: 100%;
                        LineEdit{
                            width:75%;
                            accessible-placeholder-text: "IPアドレスを入力";
                            text <=> root.search_IP_address;
                            
                        }
                        Button{
                            text:"接続";

                            clicked =>{
                                root.server_connecting({ device_name: "Custom", IP_address: root.search_IP_address});
                            }
                        }
                    }
                    ListView {
                        for data in devices: Rectangle {
                            preferred-height: 50px;
                            preferred-width: 100%;
                            Button {
                                width: 100%;
                                text: data.device_name + "                " + data.IP_address;
                                clicked => {
                                    root.server_connecting(data);
                                }
                            }
                        }
                    }
                }
                Button {
                    text: "更新";
                    clicked => {
                        root.list_update();
                    }
                }
            }
        }
        //更新ボタンが下にあるバージョン
        /*
        Tab {
            VerticalBox {
                HorizontalBox {
                    alignment:center;
                    preferred-height: 50px;
                    preferred-width: 100%;
                    LineEdit{
                        width:80%;
                        accessible-placeholder-text: "IPアドレスを入力";

                        edited(text) =>{
                            root.search_IP_address=text;
                        }
                    }
                    Button{
                        text:"検索";
                        
                        clicked =>{
                            //処理
                            debug("clicked:"+root.search_IP_address);
                        }
                    }
                }
                ListView {
                     for data in devices: Rectangle {
                        preferred-height: 50px;
                        preferred-width: 100%;
                        Button {
                            width: 100%;
                            text: data.device_name + "                " + data.IP_address;
                            clicked => {
                                root.server_connecting(data);
                            }
                        }
                    }
                }
            }
            VerticalBox {
                alignment:end;
                Button {
                    text: "更新";
                    clicked => {
                        root.list_update();
                    }
                }
            }
        }
        */
    }   
}
/*
export component device_search inherits Dialog {
    in-out property <[Device]> devices;
    callback list_update();

    preferred-width: 800px;
    preferred-height: 600px;
    min-height: 600px;
    min-width: 300px;

    HorizontalBox {
        ListView {
            for data in devices: Rectangle {
                preferred-height: 50px;
                preferred-width: 100%;
                Button {
                    width: 100%;
                    text: data.device_name + "                " + data.IP_address;
                    clicked => {}


                }
            }

        }
        Button {
            text: "更新";
            clicked => {
                root.list_update();
            }
        }
    }
}
*/
import { Device } from "device_search.slint";
import { File,FILE_TYPES } from "file.slint";
import { FileIcon, DirectoryIcon } from "icons.slint";
import { Button, StandardButton ,VerticalBox, ListView, HorizontalBox, Slider, TabWidget, LineEdit, SpinBox, GridBox, ScrollView} from "std-widgets.slint";

export global App_Data {
    in-out property <[Device]> devices:
        [
            { device_name: "Device1", IP_address: "i"},
            { device_name: "Device2", IP_address: "e"},
            { device_name: "Device3", IP_address: "e"},
            { device_name: "Device4", IP_address: "e"},
            { device_name: "Device5", IP_address: "e"},
        ];
}

export global File_Data{
    // すべてのファイルを格納
    in-out property <[File]> all_files:[
    {file_name:"desktop",file_path:"PC:\\user",file_size:65536,file_type:FILE-TYPES.directory},
    {file_name:"document",file_path:"PC:\\user",file_size:16,file_type:FILE-TYPES.directory},
    {file_name:"picture",file_path:"PC:\\user",file_size:32,file_type:FILE-TYPES.directory},
    {file_name:"download",file_path:"PC:\\user",file_size:1024,file_type:FILE-TYPES.directory},
    {file_name:"readme.txt",file_path:"PC:\\user",file_size:256,file_type:FILE-TYPES.file},
    {file_name:"ToDoList.txt",file_path:"PC:\\user",file_size:512,file_type:FILE-TYPES.file},
    ];

    // カレントディレクトリのファイルを格納
    in-out property <[File]> current_directory_files:[
    {file_name:"desktop",file_path:"PC:\\user",file_size:65536,file_type:FILE-TYPES.directory},
    {file_name:"document",file_path:"PC:\\user",file_size:16,file_type:FILE-TYPES.directory},
    {file_name:"picture",file_path:"PC:\\user",file_size:32,file_type:FILE-TYPES.directory},
    {file_name:"download",file_path:"PC:\\user",file_size:1024,file_type:FILE-TYPES.directory},
    {file_name:"readme.txt",file_path:"PC:\\user",file_size:256,file_type:FILE-TYPES.file},
    {file_name:"ToDoList.txt",file_path:"PC:\\user",file_size:512,file_type:FILE-TYPES.file},
    ];
}

export struct texts{
    values:[string]
} 

export struct point{
    x: int,
    y: int,
}

/*
<やること>
ストレージUIの実装
・検索バー実装
・パスを取得⇢UI
・パスを一覧を格納する配列？
・現在のパスを取得⇢そのパスに所属しているファイルを検索⇢表示
・現在のパスにおけるファイル一覧を格納する配列？を作成
・データを決める「ファイル名,フォルダかどうか,パス,容量,(アップロード日時)」
・更新ボタン

流れ
・更新ボタンor起動時にFileListを取得
・現在のPathを取得
・現在のPathに所属しているファイルを検索
・所属しているファイルをlistに追加
・そのlistを表示

UI
・ServerListと構造は似ている？
・上記の検索バーに現在のPath入れたらそれっぽい

・アップロードとダウンロード追加？

Storageの現在のclickなどのcallback(Rustで記述？)
・検索ボタン
　▷カレントディレクトリのパスを参照し、そのディレクトリに所属するファイル群を表示させたい
・更新ボタン
　▷すべてのファイルを格納している配列を更新し、カレントディレクトリのファイル一覧の配列も更新させる。
・ファイルのクリック
　→ファイルのクリック
　　▷ファイルの削除やダウンロードなどの操作をする
　→フォルダのクリック
　　▷カレントディレクトリのパス+そのファイル名をし、その後検索ボタンと同じ処理。

作成したい関数
・カレントディレクトリのファイル一覧を格納している配列を更新させる関数
　→すべてのファイルを探索、カレントディレクトリパスと同じパスのファイルを格納
・すべてのファイルを格納している配列を更新させる関数

・すべてのファイルを格納する配列いらないかも？
　→大元のファイルリストからカレントディレクトリパスに合致するファイルを抽出し、
　 カレントディレクトリファイルを格納している配列に格納する？

*/

export component AppWindow inherits Window {
    //コールバック
    callback list_update();
    callback server_connecting(Device);
    callback cmd_send(string);

    //フォントサイズ
    in-out property <length> file_font_size:15px;

    //現在のディレクトリパス
    in-out property <string> current_directory_path:"PC:\\user";
    
    //IPアドレスの検索テキスト
    in-out property <string> search_IP_address:"";

    //ボタンの数
    in-out property <point> buttons_num:{x:3,y:4};

    //タブの番号
    in-out property <int> tab_num:0;
    
    //コマンドのテキスト
    in-out property <[texts]> command_texts: [
        {values:["ctrl+Shift+Esc","win+e","Prtsc"]},
        {values:["Ctrl+s","Ctrl+p","win+i"]},
        {values:["Ctrl+c","Ctrl+v","Ctrl+a"]},
        {values:["mute","volup","voldown"]},
    ];
        
    //ボタンのテキスト
    in-out property <[texts]> button_texts: [
        {values:["T M","Explorer","Ptr Sc"]},
        {values:["Ctrl+S","Ctrl+P","Win+i"]},
        {values:["Copy","Paste","Ctrl+A"]},
        {values:["mute","＋","ー"]},
    ];

    //プラットフォーム名
    in-out property <string> platform;
    in-out property <[Device]> devices;
    preferred-width: 100%;
    preferred-height: 100%;
    min-height: 600px;
    min-width: 300px;

    // プラットフォーム名
    Rectangle {
        // 背景いっぱいに広げる
        width: root.width;
        height: root.height;
        Text {
            text: root.platform;
            x: parent.width / 2 - self.width / 2;
            y: parent.height / 2 - self.height / 2;
            font-size: 30px;
            color: #cccccc; // 半透明っぽく見えるグレー
        }
    }
    
    //メインコンテンツ
    VerticalBox {
        spacing: 0px;
        padding: 0px;
        // タブのコンテンツ
        Rectangle {
            width: 100%;
            //Home
            if tab_num==0 :Rectangle{
                VerticalBox {
                    alignment: center;
                    spacing: 0px;
                    padding: 0px;
                    for i in buttons_num.y:HorizontalBox{
                        alignment: center;
                        spacing: 8px;
                        padding: 4px;
                        for j in buttons_num.x:Button {
                            text: button_texts[i].values[j];
                            width: min(root.width,root.height)*0.2;
                            height: min(root.width,root.height)*0.2;

                            clicked => {
                                // コマンドを送信
                                root.cmd_send(command_texts[i].values[j]);
                            }
                        }
                    }
                }
            }
            //server
            if tab_num==1 :Rectangle{
                VerticalBox{
                    //検索など
                    HorizontalBox {
                        width: 100%;
                        alignment: center;
                        preferred-height: 50px;
                        spacing: 8px;
                        LineEdit{
                            width: parent.width - 90px - 8px - 12px;
                            accessible-placeholder-text: "IPアドレスを入力";
                            edited(text) =>{
                                root.search_IP_address=text;
                            }
                        }
                        Button{
                            width: 90px;
                            text:"検索";
                            clicked =>{
                                //処理
                                debug("clicked:"+root.search_IP_address);
                            }
                        }
                    }
                    ListView {
                        for data in devices: Rectangle {
                            preferred-height: 50px;
                            preferred-width: 100%;
                            Button {
                                width: 100%;
                                text: data.device_name + "                " + data.IP_address;
                                clicked => {
                                    root.server_connecting(data);
                                }
                            }
                        }
                    }
                    Button {
                        text: "更新";
                        width:100%;
                        clicked => {
                            root.list_update();
                        }
                    }
                }
            }
            //Storage
            if tab_num==2 :Rectangle{
                VerticalBox{
                    //検索など
                    HorizontalBox {
                        width: 100%;
                        alignment: center;
                        preferred-height: 50px;
                        spacing: 8px;
                        LineEdit{
                            width: parent.width - 90px - 8px - 12px;
                            text:current_directory_path;
                            edited(text) =>{
                                root.current_directory_path=text;
                            }
                        }
                        Button{
                            width: 90px;
                            text:"検索";
                            clicked =>{
                                //処理
                                debug("clicked:"+root.current_directory_path);
                            }
                        }
                    }
                    //"[NAME][SIZE]"の表示
                    GridBox {
                        Text {
                            horizontal-alignment:left;
                            vertical-alignment:center;
                            font-size:file_font_size*1.1;
                            color:#777;
                            text:"[NAME]";
                            col:0;
                            width:50%;
                        }
                        Text {
                            horizontal-alignment:left;
                            vertical-alignment:center;
                            font-size:file_font_size*1.1;
                            color:#777;
                            text:"   [SIZE]";
                            col:1;
                            width:50%;
                        }
                    }
                    //ファイル一覧の表示
                    ListView {
                        for data in File_Data.current_directory_files: Rectangle {
                            preferred-height: 35px;
                            background:area.pressed ? #64afff6e : area.has-hover ?  #96dcff70:#ffffff00;
                            //GridBox {
                            HorizontalBox {
                                if data.file_type == FILE_TYPES.file:
                                    FileIcon{}
                                if data.file_type == FILE_TYPES.directory:
                                    DirectoryIcon{}

                                Text{
                                    horizontal-alignment:left;
                                    vertical-alignment:center;
                                    font-size:file_font_size;
                                    text:data.file_name;
                                    wrap: no-wrap;
                                    overflow: elide;
                                    width: 50%;
                                }
                                Text {
                                    horizontal-alignment:left;
                                    vertical-alignment:center;
                                    font-size:file_font_size;
                                    text:data.file_size;
                                    wrap: no-wrap;
                                    overflow: elide;
                                    width: 50%;
                                }
                            }
                            area:=TouchArea{
                                width: 100%;
                                mouse-cursor:pointer;
                                clicked => {
                                    debug("clicked:"+data.file-name);
                                    if data.file_type==FILE-TYPES.file{
                                        //ファイルのダウンロードや削除の操作
                                    }else if data.file_type==FILE-TYPES.directory{
                                        current_directory_path+="\\"+data.file_name;//(仮)
                                    }
                                }
                            }
                        }
                    }
                    //更新ボタン
                    Button {
                        text: "更新";
                        width:100%;
                        clicked => {
                            //ファイルを更新
                        }
                    }
                }
            }
        }
        //タブの表示
        HorizontalBox {
            spacing: 0px;
            padding: 0px;
            height:54px;
            width: 100%;
            // Homeタブ
            Rectangle {
                background: tab_num == 0 ? #fafafa : HomeTabButton.has-hover ? #eeeeee : #f3f3f3;
                border-width: 1px;
                border-color: tab_num == 0 ? #a3a3a3 : #cccccc;
                HomeTabButton := TouchArea {
                    width: parent.width;
                    height: parent.height;
                    mouse-cursor: pointer;
                    clicked => {
                        tab_num = 0;
                    }
                }
                Text {
                    text: "Home";
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    font-size: tab_num == 0 ? 22px : 20px;
                    color:#444;
                    y: parent.height / 2 - self.height / 2;
                }
            }
            // Serverタブ
            Rectangle {
                background: tab_num == 1 ? #fafafa : ServerTabButton.has-hover ? #eeeeee : #f3f3f3;
                border-width: 1px;
                border-color: tab_num == 1 ? #a3a3a3 : #cccccc;
                ServerTabButton := TouchArea {
                    width: parent.width;
                    height: parent.height;
                    mouse-cursor: pointer;
                    clicked => {
                        tab_num = 1;
                    }
                }
                Text {
                    text: "Server";
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    font-size: tab_num == 1 ? 22px : 20px;
                    color: #444;
                    y: parent.height / 2 - self.height / 2;
                }
                // 左端に区切り線
                Rectangle {
                    x: 0px;
                    width: 1px;
                    height: parent.height * 0.6;
                    y: parent.height * 0.2;
                    background: #cccccc;
                }
            }
            // Storageタブ
            Rectangle {
                background: tab_num == 2 ? #fafafa : StorageTabButton.has-hover ? #eeeeee : #f3f3f3;
                border-width: 1px;
                border-color: tab_num == 2 ? #a3a3a3 : #cccccc;
                StorageTabButton := TouchArea {
                    width: parent.width;
                    height: parent.height;
                    mouse-cursor: pointer;
                    clicked => {
                        tab_num = 2;
                    }
                }
                Text {
                    text: "Storage";
                    horizontal-alignment: center;
                    vertical-alignment: center;
                    font-size: tab_num == 2 ? 22px : 20px;
                    color:#444;
                    y: parent.height / 2 - self.height / 2;
                }
                // 左端に区切り線
                Rectangle {
                    x: 0px;
                    width: 1px;
                    height: parent.height * 0.6;
                    y: parent.height * 0.2;
                    background: #cccccc;
                }
            }
        }
    }
}
/*
export component device_search inherits Dialog {
    in-out property <[Device]> devices;
    callback list_update();

    preferred-width: 800px;
    preferred-height: 600px;
    min-height: 600px;
    min-width: 300px;

    HorizontalBox {
        ListView {
            for data in devices: Rectangle {
                preferred-height: 50px;
                preferred-width: Square_size * 0.25;
                Button {
                    width: Square_size * 0.25;
                    text: data.device_name + "                " + data.IP_address;
                    clicked => {}


                }
            }

        }
        Button {
            text: "更新";
            clicked => {
                root.list_update();
            }
        }
    }
}
*/
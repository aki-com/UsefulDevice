import { Device } from "device_search.slint";
import { Button, StandardButton ,VerticalBox, ListView, HorizontalBox, Slider, TabWidget, LineEdit, SpinBox} from "std-widgets.slint";

export global App_Data {
    in-out property <[Device]> devices:
        [
            { device_name: "Device1", IP_address: "i"},
            { device_name: "Device2", IP_address: "e"},
            { device_name: "Device3", IP_address: "e"},
            { device_name: "Device4", IP_address: "e"},
            { device_name: "Device5", IP_address: "e"},
            ];
}

/*
<やること>
・音量のスライドバーではなくUpボタンDownボタンに切り替える
　→＋ボタンとーボタンに切り替えた

・音量を格納するプロパティ必要？
　→volumeプロパティを使用

・音量の上げ・下げ幅を定義
　→delta_volumeプロパティを使用

・muteされているかをわかりやすいように変更する？

・GridLayoutの使用を提案
　→サンプルは作成済み
　→均等揃えされていない問題を解決
*/

export component AppWindow inherits Window {
    callback list_update();
    callback server_connecting(Device);
    callback cmd_send(string);

    property <int> max_volume:100;
    property <int> delta_volume:5;
    in-out property <int> volume;

    in-out property <string> search_IP_address:"";
    in-out property <length> Square_size : min(root.width,root.height);
    
    in-out property <[Device]> devices;
    preferred-width: 100%;
    preferred-height: 100%;
    min-height: 600px;
    min-width: 300px;
    TabWidget {
        Tab{
            VerticalBox{//縦方向中央揃え
                alignment: center;
                HorizontalBox {//横方向中央揃え
                    alignment:center;

                    GridLayout{
                        spacing:8px;

                        Row{
                            Button {//TMボタン
                                text: "T M";
                                width: Square_size * 0.25;
                                height: Square_size * 0.25;
                    
                                    clicked => {
                                        root.cmd_send("1");
                                    }
                            }
                            Button {//Explorerボタン
                                text: "Explorer";
                                width: Square_size * 0.25;
                                height: Square_size * 0.25;
                                
                                clicked => {
                                    root.cmd_send("2");
                                }
                            }
                            Button {//Ptr Scボタン
                                text: "Ptr Sc";
                                width: Square_size * 0.25;
                                height: Square_size * 0.25;
                    
                    
                                clicked => {
                                    root.cmd_send("3");
                                }
                            }
                        }
                        Row{
                            Button {//Ctrl+Sボタン
                                text: "Ctrl+S";
                                width: Square_size * 0.25;
                                height: Square_size * 0.25;
                                
                                clicked => {
                                    root.cmd_send("4");
                                }
                            }
                            Button {//Ctrl+Pボタン
                                text: "Ctrl+P";
                                width: Square_size * 0.25;
                                height: Square_size * 0.25;
                                
                                clicked => {
                                    root.cmd_send("5");
                                }
                            }
                            Button {//Win+iボタン
                                text: "win+i";
                                width: Square_size * 0.25;
                                height: Square_size * 0.25;
                                
                                clicked => {
                                    root.cmd_send("6");
                                }
                            }
                        }
                        Row{
                            Button {//Copyボタン
                                text: "Copy";
                                width: Square_size * 0.25;
                                height: Square_size * 0.25;
                                
                                clicked => {
                                    root.cmd_send("7");            
                                }
                            }
                            Button {//Pasteボタン
                                text: "Paste";
                                width: Square_size * 0.25;
                                height: Square_size * 0.25;
                                
                                clicked => {
                                    root.cmd_send("8");
                                }
                            }
                            Button {//Ctrl+Aボタン
                                text: "Ctrl+A";
                                width: Square_size * 0.25;
                                height: Square_size * 0.25;
                                
                                clicked => {
                                    root.cmd_send("9");
                                }
                            }
                        }
                        Row{
                            HorizontalBox {//音量調整
                                colspan: 3;
                                alignment:center;
                                Button {//muteボタン
                                    text: "mute";
                                    width: Square_size * 0.25;

                                    clicked => {
                                        root.cmd_send("10");
                                    }

                                }
                                Button{//＋ボタン
                                    text:"＋";

                                    clicked => {
                                        if (volume + delta_volume)<=max_volume{
                                            volume += delta_volume;
                                        }else{
                                            volume=max_volume;
                                        }
                                    }
                                }
                                Text{//Volumeテキスト
                                    horizontal-alignment: center;
                                    width:40px;

                                    font-size:32px;
                                    text:volume;
                                }
                                Button {//ーボタン
                                    text:"ー";

                                    clicked => {
                                        if 0 <= (volume - delta_volume){
                                            volume -= delta_volume;
                                        }else{
                                            volume=0;
                                        }
                                    }
                                }
                            }
                        }
                    }

                }//横方向中央揃え
            }//縦方向中央揃え
        }
        Tab {
            HorizontalBox {
                 VerticalBox{
                    HorizontalBox {
                        preferred-height: 50px;
                        preferred-width: 100%;
                        LineEdit{
                            width:75%;
                            accessible-placeholder-text: "IPアドレスを入力";

                            edited(text) =>{
                                root.search_IP_address=text;
                            }
                        }
                        Button{
                            text:"検索";

                            clicked =>{
                                //処理
                                debug("clicked:"+root.search_IP_address);
                            }
                        }
                    }
                    ListView {
                        for data in devices: Rectangle {
                            preferred-height: 50px;
                            preferred-width: 100%;
                            Button {
                                width: 100%;
                                text: data.device_name + "                " + data.IP_address;
                                clicked => {
                                    root.server_connecting(data);
                                }
                            }
                        }
                    }
                }
                Button {
                    text: "更新";
                    clicked => {
                        root.list_update();
                    }
                }
            }
        }
    }   
}
/*
export component device_search inherits Dialog {
    in-out property <[Device]> devices;
    callback list_update();

    preferred-width: 800px;
    preferred-height: 600px;
    min-height: 600px;
    min-width: 300px;

    HorizontalBox {
        ListView {
            for data in devices: Rectangle {
                preferred-height: 50px;
                preferred-width: 100%;
                Button {
                    width: 100%;
                    text: data.device_name + "                " + data.IP_address;
                    clicked => {}


                }
            }

        }
        Button {
            text: "更新";
            clicked => {
                root.list_update();
            }
        }
    }
}
*/